<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="app_name">BENDER</string>
    <string name="tasks">Task List</string>
    <string name="complexity">O(n)</string>
    <string name="codstyle">Coding style</string>
    <string name="bender">BENDER</string>
    <string name="codstyle_text"><b>Общее</b>\n
- отступы по 4 пробела\n
- на пустых строках тоже должно быть нужное число пробелов\n
- комментарии в коде не допускаются\n
\n
<b>Использование библиотек Си</b>\n
- инклудить можно только stdio.h\n
- разрешенные вызовы: scanf, printf, fopen, fscanf, fprintf, fclose\n
\n
<b>Переменные</b>\n
- объявляются только в начале блока операций и заголовках for\n
- глобальные переменные (объявленные вне функций) не допускаются\n
- названия в lowerCamelCase, состоящие из английских слов\n
- однобуквенные переменные:\n
--- для данных в простых задачах: a, b, c, d, e или x, y, z\n
--- для циклов: i, j, k\n
\n
<b>Идентификаторы</b>\n
- названия функций в lowerCamelCase, состоящие из английских слов\n
- названия макросов заглавными буквами, состоящие из английских слов через подчеркивания\n
\n
<b>Пустые строки</b>\n
- между инклудом и дефайнами, дефайнами и первой функцией, соседними фунциями, объявлением переменных и кодом\n
- между логическими частями кода (например, ввод, обработка, вывод, return 0)\n
\n
<b>Пробелы</b>\n
- ставим пробелы: в выражениях вокруг бинарных операторов, после запятых при перечислении аргументов функций, например: a + b; f(a, b, c)\n
- не ставим пробелы: в выражениях внутри круглых скобок, вокруг бинарных операторов в индексах массивов и вызовах функций, например: (a + b) / 2; a[i-1]; f(x-1, y)\n
\n
<b>Операторы</b>\n
- инкремент и декремент допустимы только в заголовке цикла for\n
\n
<b>Дополнительно</b>\n
- использование в коде констант, не предусмотренных условиями задачи, считается code fail. Не стоит заменять 2 на 1+1, стоит подумать над своим алгоритмом - вероятно, он ошибочен.\n
    </string>
    <string name="reference">Docs</string>
    <string name="preferenses">About</string>
    <string name="mingw_commands">MinGW Commands</string>
    <string name="mingw_text"><b>npp</b> -- открыть редактор Notepad++\n\n
        <b>gcc [имя файла с исходным кодом]</b> -- компиляция файла\n\n
        <b>[имя программы] > [имя файла для вывода]</b> -- направляет вывод программы в файл\n\n
        <b>cls</b> -- очистить экран\n\n
        <b>ls </b>-- вывод содержимого каталога\n\n
        <b>pwd</b> -- показывает каталог в котором мы сейчас находимся\n\n
        <b>cd [имя каталога] </b>-- переход в указанный каталог\n\n
        <b>cp [что копировать] [куда копировать] </b>-- копирование\n\n
        <b>rm [файлы] </b>-- удалить файл\n\n
        <b>mv [что] [куда (во что)]</b> -- переместить (переименовать) файл\n\n
        <b>cat </b>-- отобразить содержимое файла\n\n
        <b>touch [имя файла] </b>-- создать пустой файл с указанным именем\n\n
        <b>mkdir [имя каталога] </b>-- создать каталог\n\n
		<b>rmdir [имя каталога] </b>-- удалить каталог\n\n
		<b>rm -r [имя файлов и(или) каталогов] </b>-- рекурсивное удаление файлов, каталогов и их подкаталогов. Команда опасна, легко можно лишиться всего наработанного, если ошибиться каталогом. Применяйте очень аккуратно.\n\n
        <b>-h</b> для почти всех команд можно почитать подробную, интересную справку, запустив команду с этим аргументом\n\n
        <b>Клавиша TAB </b>-- удобно использовать при наборе длинных имен уже существующих файлов. Например в каталоге лежит файл helloWorldAgainAgainAndAgain.c. Каждый раз полностью набирать такое имя крайне не удобно. Достаточно набрать несколько первых букв названия и нажать TAB, оставшаяся часть подставится автоматически.\n\n
        <b>Клавиша Up arrow </b>(cтрелка вверх) возвращает предыдущую строку команд, отправленную на выполнение, в строку ввода.\n\n
        </string>
	<string name="weekthemes">
<b>1 weekend</b>\n\n

1. Основы синтаксиса С-подобных языков. Подключение библиотек.\n
2. Компиляция программ.\n
3. Работа с консолью. Ввод и вывод данных.\n
4. Константы и переменные.\n
5. Операторы: арифметика, сравнение, логика, присвоение.\n
6. Ветвления. Условное выполнение. Блоки операций.\n
7. Алгоритм сравнения чисел.\n
8. Область видимости переменных.\n
9. Функции.\n
10. Циклы. Однотипность действий.\n
11. Стандарты языка программирования.\n
12. Макросы.\n
13. Вложенность циклов. Дополнительные переменные в циклах\n\n

<b>2 weekend</b>\n\n

1. Автоматизированное тестирование. Основные принципы.\n
2. Работа с файлами.\n
3. Контроль ввода данных.\n
4. Рекуррентные соотношения. Рекурсия.\n
5. Массивы. Оработка массивов данных.\n
6. Размер данных. Переполнение целочисленных типов.\n
7. Указатели. Адресная арифметика.\n\n

<b>3 weekend</b>\n\n

1. Анализ алгоритмов. Алгоритмическая сложность.\n
2. Алгоритмы обработки данных:\n
* merge (слияние массивов)\n
* shift (циклический сдвиг на заданную величину)\n
* binarySearch\n
3. Матрицы.\n
4. Символы. Таблица кодировки. Арифметика символов.\n
5. Нуль-терминированные строки.\n\n

<b>4 weekend</b>\n\n

1. Использование памяти. Space complexity.\n
2. Алгоритмы сортировки: \n
* SelectSort\n
* BubbleSort\n
* InsertSort\n
* MergeSort\n
* QuickSort\n
3. Безопасность: переполнение буфера.\n
4. Составные типы данных (struct). Объявление новых типов данных (typedef).\n\n

<b>5 weekend</b>\n\n

1. Алгоритмы сортировки для данных с ограниченным диапазоном значений.\n
2. Основные принципы ООП. Отражение реального мира в коде. Объекты и классы.\n
3. Свойства и методы. Конструкторы объектов.\n
4. Инкапсуляция. Сокрытие данных и реализации. Область применения.\n
5. Ссылки. Константные ссылки.\n
6. Перегрузка операторов. Перегрузка методов.\n
7. Наследование и полиморфизм. Область применения.\n
8. Конструктор копирования.\n
9. Статические свойства и методы.\n
10. Исключения и их обработка. Нюансы применения.\n
11. Абстрактные методы и классы. Общие принципы.\n\n

<b>6 weekend</b>\n\n

1. Сообщения об ошибках. Исключения. Обработка исключений.\n
2. Статические свойства и методы.\n
3. Абстрактные методы и классы.\n
4. Множественное наследование.\n
5. TypeHinting. Интерфейсы. DuckTyping.\n
6. Списки и связанные списки.\n
7. Множества, бинарные деревья, хэш-таблицы, словари.\n
	    
	</string>
	<string name="save">Cохранить</string>
	<string name="saveas">Cохранить как</string>
	<string name="msgnewfilename">Имя файла</string>
	<string name="btncancel">Отмена</string>
</resources>